

package com.mycompany.drturnosgui;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 * Interfaz grafica de los pacientes 
 * @author usuario
 */
public class ClientesGUI extends javax.swing.JFrame {
    
    //Sets para guardar clientes y obras sociales
    private Set<Cliente> clientes;
    private Set<ObraSocial> obrasSociales;  
    //Modelo de tabla
    private DefaultTableModel model;
    
    /**
     * Constructor de ClientesGUI
     * @param clientes
     * @param obrasSociales
     */
    public ClientesGUI(Set<Cliente> clientes, Set<ObraSocial> obrasSociales) {
        this.clientes = clientes;
        this.obrasSociales = obrasSociales;
        initComponents();
        
        loadTableData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblClientes.setBackground(new java.awt.Color(204, 255, 204));
        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre", "Telefono", "Obra social"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.setSelectionBackground(new java.awt.Color(153, 255, 153));
        jScrollPane1.setViewportView(tblClientes);

        btnAgregar.setBackground(new java.awt.Color(0, 204, 153));
        btnAgregar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(0, 204, 153));
        btnModificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 204, 153));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo llamado al presionar el boton "Agregar"
     * @param evt 
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        AgregarClienteGUI agregarClienteGUI = new AgregarClienteGUI(clientes, obrasSociales, this);
        agregarClienteGUI.setVisible(true);
        agregarClienteGUI.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnAgregarActionPerformed
    /**
     * Metodo llamado al cerrar la ventana
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        GuardarHashSet();
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblClientes.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) tblClientes.getModel();
            ModificarClienteGUI modificarClienteGUI = new ModificarClienteGUI(obrasSociales, clientes, model, selectedRow);
            modificarClienteGUI.setVisible(true);
            dispose();
        } else {
           showError("Selecciona un cliente para modificar.");
        }
        loadTableData();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        limpiarCamposSeleccionados();
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblClientes;
    // End of variables declaration//GEN-END:variables

    //METODOS
    
    /**
     * Metodo para cargar la informacion de los clientes almacenados en el Set clientes en la tabla
     */
    private void loadTableData() {
        DefaultTableModel model = (DefaultTableModel) tblClientes.getModel();
        if (model.getRowCount() > 0) {
            model.setRowCount(0);
        }
        for (Cliente cliente : clientes) {
           model.addRow(new Object[]{cliente.getDni(), cliente.getNombre(), cliente.getTelefono(), cliente.getObraSocial()});
        }
    }
    
    /**
     * Metodo para actualizar los datos de la tabla al agregar un cliente
     */
    public void actualizarTabla() {
        loadTableData(); // Recargar datos en la tabla
    }
    
    /**
     * Metodo que muestra el error en pantalla
     * @param message, mensaje que va a mostrar por pantalla
     */
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
    /**
     * Metodo para guardar el Set clientes en el archivo clientes.ser 
     */
    public void GuardarHashSet(){
        guardarHashSet(clientes, "clientes.ser");
    }
    
    /**
     * Metodo para guardar un HashSet en un archivo
     * @param set, set que guarda
     * @param fileName, nombre del archivo donde se guarda
     */
    private void guardarHashSet(Set<? extends Serializable> set, String fileName) {
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(fileName);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
            objectOutputStream.writeObject(set);
            objectOutputStream.flush();
            objectOutputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
     /**
     * Metodo para eliminar un paciente
     * @param dni
     */
    private void eliminarCliente(String dni) {
        Iterator<Cliente> iterator = clientes.iterator();
        while (iterator.hasNext()) {
            Cliente cliente = iterator.next();
            if (cliente.getDni().equals(dni)) {
                iterator.remove();
                break;
            }
        }
        loadTableData();
    }



    private void limpiarCamposSeleccionados(){
        int selectedRow = tblClientes.getSelectedRow();
        if (selectedRow != -1){
            DefaultTableModel model = (DefaultTableModel) tblClientes.getModel();
            String dni = model.getValueAt(selectedRow, 0).toString();
            model.setValueAt("", selectedRow, 0);
            model.setValueAt("", selectedRow, 1);
            model.setValueAt("", selectedRow, 2);
            model.setValueAt("", selectedRow, 3);
            
            eliminarCliente(dni);
        }else{
            showError("Selecciona un cliente para limpiar los campos.");
        }
    }
}
